# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

class FibonacciNumbers
  attr_accessor :fibonacciNumbersArray, :even_fibonacci_array

  def initialize
    @fibonacciNumbersArray = [0,1]
    @even_fibonacci_array = []
  end

  def fibonacci(max)
    i = 2
    sum = 0
      while sum < max
        sum = @fibonacciNumbersArray[i-1] +@fibonacciNumbersArray[i-2]
        @fibonacciNumbersArray << sum
        i +=1
      end
    @fibonacciNumbersArray
    # @fibonacciNumbersArray
  end

  def even(@fibonacciNumbersArray)
    for i in (0..@fibonacciNumbersArray.length-1)
      if @fibonacciNumbersArray[i].even?
        @even_fibonacci_array << i
      end
    end
  end


end

fibo = FibonacciNumbers.new
print fibo.fibonacci(4000000)
